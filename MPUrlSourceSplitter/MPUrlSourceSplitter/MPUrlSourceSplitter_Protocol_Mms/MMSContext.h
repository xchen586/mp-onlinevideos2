/*
    Copyright (C) 2007-2010 Team MediaPortal
    http://www.team-mediaportal.com

    This file is part of MediaPortal 2

    MediaPortal 2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MediaPortal 2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MediaPortal 2.  If not, see <http://www.gnu.org/licenses/>.
*/

#pragma once

#ifndef __MMSCONTEXT_DEFINED
#define __MMSCONTEXT_DEFINED

#include "MPUrlSourceSplitter_Protocol_Mms_Exports.h"
#include "LinearBuffer.h"
#include "MMSStreamCollection.h"

#include <stdint.h>

#define HEADER_BUFFER_SIZE                                                    64 * 1024
#define MMS_MAX_STREAMS                                                       256

typedef uint8_t ASF_GUID[16];

const ASF_GUID ASF_HEADER = {
    0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9, 0x00, 0xAA, 0x00, 0x62, 0xCE, 0x6C
};

const ASF_GUID ASF_FILE_HEADER = {
    0xA1, 0xDC, 0xAB, 0x8C, 0x47, 0xA9, 0xCF, 0x11, 0x8E, 0xE4, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65
};

const ASF_GUID ASF_STREAM_HEADER = {
    0x91, 0x07, 0xDC, 0xB7, 0xB7, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65
};

const ASF_GUID ASF_EXT_STREAM_HEADER = {
    0xCB, 0xA5, 0xE6, 0x14, 0x72, 0xC6, 0x32, 0x43, 0x83, 0x99, 0xA9, 0x69, 0x52, 0x06, 0x5B, 0x5A
};

const ASF_GUID ASF_AUDIO_STREAM = {
    0x40, 0x9E, 0x69, 0xF8, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B
};

const ASF_GUID ASF_AUDIO_CONCEAL_NONE = {
    // 0x40, 0xa4, 0xf1, 0x49, 0x4ece, 0x11d0, 0xa3, 0xac, 0x00, 0xa0, 0xc9, 0x03, 0x48, 0xf6
    // New value lifted from avifile
    0x00, 0x57, 0xfb, 0x20, 0x55, 0x5B, 0xCF, 0x11, 0xa8, 0xfd, 0x00, 0x80, 0x5f, 0x5c, 0x44, 0x2b
};

const ASF_GUID ASF_AUDIO_CONCEAL_SPREAD = {
     0x50, 0xCD, 0xC3, 0xBF, 0x8F, 0x61, 0xCF, 0x11, 0x8B, 0xB2, 0x00, 0xAA, 0x00, 0xB4, 0xE2, 0x20
};

const ASF_GUID ASF_VIDEO_STREAM = {
    0xC0, 0xEF, 0x19, 0xBC, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B
};

const ASF_GUID ASF_JFIF_MEDIA = {
    0x00, 0xE1, 0x1B, 0xB6, 0x4E, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B
};

const ASF_GUID ASF_VIDEO_CONCEAL_NONE = {
    0x00, 0x57, 0xFB, 0x20, 0x55, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B
};

const ASF_GUID ASF_COMMAND_STREAM = {
    0xC0, 0xCF, 0xDA, 0x59, 0xE6, 0x59, 0xD0, 0x11, 0xA3, 0xAC, 0x00, 0xA0, 0xC9, 0x03, 0x48, 0xF6
};

const ASF_GUID ASF_COMMENT_HEADER = {
    0x33, 0x26, 0xb2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xa6, 0xd9, 0x00, 0xaa, 0x00, 0x62, 0xce, 0x6c
};

const ASF_GUID ASF_CODEC_COMMENT_HEADER = {
    0x40, 0x52, 0xD1, 0x86, 0x1D, 0x31, 0xD0, 0x11, 0xA3, 0xA4, 0x00, 0xA0, 0xC9, 0x03, 0x48, 0xF6
};
const ASF_GUID ASF_CODEC_COMMENT1_HEADER = {
    0x41, 0x52, 0xd1, 0x86, 0x1D, 0x31, 0xD0, 0x11, 0xa3, 0xa4, 0x00, 0xa0, 0xc9, 0x03, 0x48, 0xf6
};

const ASF_GUID ASF_DATA_HEADER = {
    0x36, 0x26, 0xb2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xa6, 0xd9, 0x00, 0xaa, 0x00, 0x62, 0xce, 0x6c
};

const ASF_GUID ASF_HEAD1_GUID = {
    0xb5, 0x03, 0xbf, 0x5f, 0x2E, 0xA9, 0xCF, 0x11, 0x8e, 0xe3, 0x00, 0xc0, 0x0c, 0x20, 0x53, 0x65
};

const ASF_GUID ASF_HEAD2_GUID = {
    0x11, 0xd2, 0xd3, 0xab, 0xBA, 0xA9, 0xCF, 0x11, 0x8e, 0xe6, 0x00, 0xc0, 0x0c, 0x20, 0x53, 0x65
};

const ASF_GUID ASF_EXTENDED_CONTENT_HEADER = {
        0x40, 0xA4, 0xD0, 0xD2, 0x07, 0xE3, 0xD2, 0x11, 0x97, 0xF0, 0x00, 0xA0, 0xC9, 0x5E, 0xA8, 0x50
};

const ASF_GUID ASF_SIMPLE_INDEX_HEADER = {
        0x90, 0x08, 0x00, 0x33, 0xB1, 0xE5, 0xCF, 0x11, 0x89, 0xF4, 0x00, 0xA0, 0xC9, 0x03, 0x49, 0xCB
};

const ASF_GUID ASF_EXT_STREAM_EMBED_STREAM_HEADER = {
        0xe2, 0x65, 0xfb, 0x3a, 0xEF, 0x47, 0xF2, 0x40, 0xac, 0x2c, 0x70, 0xa9, 0x0d, 0x71, 0xd3, 0x43
};

const ASF_GUID ASF_EXT_STREAM_AUDIO_STREAM = {
        0x9d, 0x8c, 0x17, 0x31, 0xE1, 0x03, 0x28, 0x45, 0xb5, 0x82, 0x3d, 0xf9, 0xdb, 0x22, 0xf5, 0x03
};

const ASF_GUID ASF_METADATA_HEADER = {
        0xea, 0xcb, 0xf8, 0xc5, 0xaf, 0x5b, 0x77, 0x48, 0x84, 0x67, 0xaa, 0x8c, 0x44, 0xfa, 0x4c, 0xca
};

const ASF_GUID ff_asf_marker_header = {
        0x01, 0xCD, 0x87, 0xF4, 0x51, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65
};

/* I am not a number !!! This GUID is the one found on the PC used to
   generate the stream */
const ASF_GUID ASF_MY_GUID = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

const ASF_GUID ASF_LANGUAGE_GUID = {
    0xa9, 0x46, 0x43, 0x7c, 0xe0, 0xef, 0xfc, 0x4b, 0xb2, 0x29, 0x39, 0x3e, 0xde, 0x41, 0x5c, 0x85
};

const ASF_GUID ASF_CONTENT_ENCRYPTION = {
    0xfb, 0xb3, 0x11, 0x22, 0x23, 0xbd, 0xd2, 0x11, 0xb4, 0xb7, 0x00, 0xa0, 0xc9, 0x55, 0xfc, 0x6e
};

const ASF_GUID ASF_EXT_CONTENT_ENCRYPTION = {
    0x14, 0xe6, 0x8a, 0x29, 0x22, 0x26, 0x17, 0x4c, 0xb9, 0x35, 0xda, 0xe0, 0x7e, 0xe9, 0x28, 0x9c
};

const ASF_GUID ASF_DIGITAL_SIGNATURE = {
    0xfc, 0xb3, 0x11, 0x22, 0x23, 0xbd, 0xd2, 0x11, 0xb4, 0xb7, 0x00, 0xa0, 0xc9, 0x55, 0xfc, 0x6e
};


class MPURLSOURCESPLITTER_PROTOCOL_MMS_API MMSContext
{
public:
  // constructor
  // create instance of MMSContext class
  MMSContext(void);

  // destructor
  ~MMSContext(void);

  // gets linear buffer
  // @return : reference to linear buffer or NULL if error
  LinearBuffer *GetBuffer(void);

  // gets MMS stream collection
  // @return : reference to MMS stream collection or NULL if error
  MMSStreamCollection *GetStreams(void);

  // gets if ASF header is parsed
  // @return : true if header is parsed, false otherwise
  bool GetHeaderParsed(void);

  // set if ASF header is parsed
  // @param headerParsed : true if header is parsed, false otherwise
  void SetHeaderParsed(bool headerParsed);

  // tests if context is valid
  // @return : true if valid, false otherwise
  bool IsValid(void);

  // sets chunk sequence
  // @param chunkSequence : chunk sequence to set
  void SetChunkSequence(unsigned int chunkSequence);

  // gets chunk sequence
  // @return : chunk sequence
  unsigned int GetChunkSequence(void);

  // sets network timeout
  // @param timeout : timeout (ms) to set
  void SetTimeout(unsigned int timeout);

  // gets network timeout
  // @return : network timeout
  unsigned int GetTimeout(void);

  // initializes ASF header
  // @param asfHeaderLength : the length of ASF header
  // @return : true if successful, false otherwise
  bool InitializeAsfHeader(unsigned int asfHeaderLength);

  // clears ASF header
  void ClearAsfHeader(void);

  // gets ASF header
  // @return : reference to ASF header (can be NULL if not initialized)
  char *GetAsfHeader(void);

  // gets ASF header length
  // @return : ASF header length
  unsigned int GetAsfHeaderLength(void);

  // gets ASF packet length
  // @return : ASF packet length
  unsigned int GetAsfPacketLength(void);

  // sets ASF packet length
  // @param : ASF packet length to set
  void SetAsfPacketLength(unsigned int asfPacketLength);

protected:
  // buffer for ASF header
  LinearBuffer *buffer;

  // specifies if ASF header is parsed
  bool headerParsed;

  //unsigned int stream_num;

  // the collection of streams
  MMSStreamCollection *streams;

  // request sequence number
  unsigned int requestSequenceNumber;

  // chunk sequence
  unsigned int chunkSequence;

  // specifies network timeout (ms)
  unsigned int timeout;

  // holds ASF header
  char *asfHeader;

  // holds ASF header length
  unsigned int asfHeaderLength;

  // holds ASF packet length
  unsigned int asfPacketLength;
};

#endif